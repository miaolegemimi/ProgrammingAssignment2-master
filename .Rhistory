?<<-
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(1:10)
cachemean(1:10)
cachemean()
cachemean(1)
cachemean(makeVector(1:10))
cachemean(makeVector(2:10))
cachemean(makeVector(1:10))
cachemean(makeVector(100:10))
makeVector(1:10)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cachemean(1:10)
cachemean("1:10")
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
x<-(1:6,2,3)
x<-matrix(1:6,2,3)
makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(makeCacheMatrix(x))
x<-(1:9,3,3)
x<-matrix(1:9,3,3)
cacheSolve(makeCacheMatrix(x))
x<-matrix(c(1,0,0,0,1,0,0,0,1),3,3)
cacheSolve(makeCacheMatrix(x))
x<-matrix(c(0,1,0,0,0,1,0,1,0,0),3,3)
x<-matrix(c(0,1,0,0,0,1,0,1,0),3,3)
cacheSolve(makeCacheMatrix(x))
x<-matrix(c(2,0,2,0,1,2,0,0,2),3,3)
cacheSolve(makeCacheMatrix(x))
makeCacheMatrix(x)
cacheSolve(makeCacheMatrix(x))
solve(x)
x<-c(1:10)
cachmean(x)
cachemean(x)
makeVector(x)
cachemean(x)
cachemean(makeVector(x))
